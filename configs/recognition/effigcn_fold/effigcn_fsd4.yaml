MODEL: #MODEL field
  framework: "RecognizerGCN" #Mandatory, indicate the type of network, associate to the 'paddlevideo/modeling/framework/' .
  backbone: #Mandatory, indicate the type of backbone, associate to the 'paddlevideo/modeling/backbones/' .
    name: "EfficientGCN" #Mandatory, The name of backbone.
  head:
    name: "EfficientGCNHead" #Mandatory, indicate the type of head, associate to the 'paddlevideo/modeling/heads'
    # num_classes: 30  #Optional, the number of classes to be classified.
    ls_eps: 0.1

dataset: fsd
dataset_args:
  fsd:
    num_frame: 500
    inputs: JVB


DATASET: #DATASET field
  batch_size: 16 #Mandatory, bacth size
  num_workers: 4 #Mandatory, the number of subprocess on each GPU.
  val_batch_size: 8
  val_num_workers: 4
  test_batch_size: 1
  test_num_workers: 0
  train:
       format: "SkeletonDataset" #Mandatory, indicate the type of dataset, associate to the 'paddlevidel/loader/dateset'
       file_path: "DATASET_DIR/fixed1_fold/fold4_train_data.npy" #Mandatory, train data index file path
       label_path: "DATASET_DIR/fixed1_fold/fold4_train_label.npy"
  valid:
       format: "SkeletonDataset" #Mandatory, indicate the type of dataset, associate to the 'paddlevidel/loader/dateset'
       file_path: "DATASET_DIR/fixed1_fold/fold4_valid_data.npy" #Mandatory, train data index file path
       label_path: "DATASET_DIR/fixed1_fold/fold4_valid_label.npy"
  test:
       format: "SkeletonDataset" #Mandatory, indicate the type of dataset, associate to the 'paddlevidel/loader/dateset'
       file_path: "DATASET_DIR/fixed1_test_B_data.npy" #Mandatory, valid data index file path
       test_mode: True

PIPELINE: #PIPELINE field
  train: #Mandotary, indicate the pipeline to deal with the training data, associate to the 'paddlevideo/loader/pipelines/'
    sample:
      name: "AutoPadding"
      window_size: 500
    transform: #Mandotary, image transfrom operator
      - SkeletonNorm:
      #- CutOut:
      #    alpha: 0.2
      #      - YaxisScaling:
      #          alpha: 0.1
      #      - Rotate:
      #          alpha: 10
      #      - Scaling:
      #          alpha: 0.2
      - EffPipeLine:
  valid: #Mandotary, indicate the pipeline to deal with the training data, associate to the 'paddlevideo/loader/pipelines/'
    sample:
      name: "AutoPadding"
      window_size: 500
    transform: #Mandotary, image transfrom operator
      - SkeletonNorm:
      - EffPipeLine:
  test: #Mandatory, indicate the pipeline to deal with the validing data. associate to the 'paddlevideo/loader/pipelines/'
    sample:
      name: "AutoPadding"
      window_size: 500
    transform: #Mandotary, image transfrom operator
      - SkeletonNorm:
      - EffPipeLine:


OPTIMIZER: #OPTIMIZER field
  name: 'Momentum'
  momentum: 0.9
  learning_rate:
    iter_step: True
    name: 'CustomWarmupCosineDecay'
    max_epoch: 100
    warmup_epochs: 10
    warmup_start_lr: 0.005
    cosine_base_lr: 0.05
  weight_decay:
    name: 'L2'
    value: 1e-4

# MIX:
#   name: "Mixup"
#   alpha: 0.5

METRIC:
  name: 'SkeletonMetric'
  out_dir: "./output/EFFGCN_fold4"
  out_file: 'submission.csv'

# Model
model_type: EfficientGCN-B4
model_args:
  stem_channel: 64
  block_args: [[48,1,0.5],[24,1,0.5],[64,2,1],[128,2,1]]
  fusion_stage: 2
  act_type: swish
  att_type: stja
  layer_type: Sep
  drop_prob: 0.25
  kernel_size: [5,2]
  scale_args: [1.2,1.35]
  expand_ratio: 2
  reduct_ratio: 4
  bias: True
  edge: True


#INFERENCE:
#   name: 'STGCN_Inference_helper'
#   num_channels: 3 #TODO debug code 2
#   window_size: 600 #todo debug code 350
#   vertex_nums: 25
#   person_nums: 1

debug: False

model_name: "EFFGCN"

log_interval: 10 #Optional, the interal of logger, default:10
val_interval: 1
epochs: 100 #Mandatory, total epoch
output_dir: "./output/EFFGCN_fold4"
